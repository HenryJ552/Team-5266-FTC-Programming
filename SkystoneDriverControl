package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.CRServo;


@TeleOp(name="SkyStoneDriverControl", group="Linear Opmode") // @Autonomous(...) is the other common choice

public class SkystoneDriverControl extends LinearOpMode {
 
 private DcMotor m1;
 private DcMotor m2;
 private DcMotor m3;
 private DcMotor m4;
 
 private DcMotor w1;
 private DcMotor w2;
 private CRServo w3;
 private CRServo w4;
 private CRServo w5;
 private CRServo w6;
 
 private CRServo GSPinion;
 
 private Servo FG1;
 private Servo FG2;
  
 private Servo BGRight;
 private Servo BGLeft;
  
 private DcMotor lm;
 private DcMotor lm2;
 
 private Servo skystone_grabber;
 private Servo skystone_grabber2;
  
 double RF; double LF; double RR; double LR;
 double X1; double Y1; double X2; double Y2;
 double joyScale = 1;
 double motorMax = 1; 
 
 double joyX1 = 0;
 double joyY2 = 0;
 double joyX2 = 0;

 @Override
 public void runOpMode() {
  
 startup();
 
 waitForStart();

 while (opModeIsActive()) {
 
  lm.setPower(gamepad2.left_stick_y);
  lm2.setPower(gamepad2.left_stick_y);
  GSPinion.setPower(gamepad2.right_stick_x);
  
  
  if (gamepad2.left_bumper) {
   BGLeft.setPosition(0.55);
   BGRight.setPosition(0.55);
  } else if (gamepad2.right_bumper) {
   BGLeft.setPosition(0.48);
   BGRight.setPosition(0.48);
  }
  
  if (gamepad1.a) {
    FG1.setPosition(0.5);
    FG2.setPosition(0.5);
  } else if (gamepad1.b) {
    FG1.setPosition(1);
    FG2.setPosition(1);
  }
  
  if(gamepad2.left_trigger > 0.1) {
   wheelsOut();
  }
 
  if(gamepad2.right_trigger > 0.1) {
   wheelsIn();
  }
 
  if(gamepad2.x) {
   wheelsOff();
  }
  
  if(gamepad1.left_stick_x > 0.02) {
   joyX1 =  Math.min(Math.max(-0.5 * Math.log(-(8.5 * gamepad1.left_stick_x - 10)) + 1.2, 0.05), 1);
  } else if(gamepad1.left_stick_x < -0.02) {
   joyX1 = - Math.min(Math.max(-0.5 * Math.log(-(8.5 * Math.abs(gamepad1.left_stick_x)  - 10)) + 1.2, 0.05), 1);
  } else {
   joyX1 = 0;
  }
  
  if(gamepad1.right_stick_y > 0.02) {
   joyY2 =  Math.min(Math.max(-0.5 * Math.log(-(8.5 * gamepad1.right_stick_y - 10)) + 1.2, 0.05), 1);
  } else if(gamepad1.right_stick_y < -0.02) {
   joyY2 = - Math.min(Math.max(-0.5 * Math.log(-(8.5 * Math.abs(gamepad1.right_stick_y)  - 10)) + 1.2, 0.05), 1);
  } else {
   joyY2 = 0;
  }
  
  if(gamepad1.right_stick_x > 0.02) {
   joyX2 =  Math.min(Math.max(-0.5 * Math.log(-(8.5 * gamepad1.right_stick_x - 10)) + 1.2, 0.05), 1);
  } else if(gamepad1.right_stick_x < -0.02) {
   joyX2 = - Math.min(Math.max(-0.5 * Math.log(-(8.5 * Math.abs(gamepad1.right_stick_x)  - 10)) + 1.2, 0.05), 1);
  } else {
   joyX2 = 0;
  }
  
  mecanumDrive(joyY2, joyX2, joyX1);
  
  }
  
 }
 
 public void startup() {
 telemetry.addData("Status", "Initializing");
 telemetry.update();

 m1 = hardwareMap.dcMotor.get("m1");
 m2 = hardwareMap.dcMotor.get("m2");
 m3 = hardwareMap.dcMotor.get("m3");
 m4 = hardwareMap.dcMotor.get("m4");
 
 w1 = hardwareMap.dcMotor.get("w1");
 w2 = hardwareMap.dcMotor.get("w2");
 w3 = hardwareMap.crservo.get("w3");
 w4 = hardwareMap.crservo.get("w4");
 w5 = hardwareMap.crservo.get("w5");
 w6 = hardwareMap.crservo.get("w6");
 
 lm = hardwareMap.dcMotor.get("lm");
 lm2 = hardwareMap.dcMotor.get("lm2");
 
 GSPinion = hardwareMap.crservo.get("GSPinion ");
 
 BGRight = hardwareMap.servo.get("BGRight");
 BGLeft = hardwareMap.servo.get("BGLeft");
 
 FG1 = hardwareMap.servo.get("FG1");
 FG2 = hardwareMap.servo.get("FG2");
 
 skystone_grabber = hardwareMap.servo.get("skystone_grabber");
 skystone_grabber2 = hardwareMap.servo.get("skystone_grabber2");

 m1.setDirection(DcMotor.Direction.FORWARD);
 m2.setDirection(DcMotor.Direction.FORWARD);
 m3.setDirection(DcMotor.Direction.REVERSE);
 m4.setDirection(DcMotor.Direction.REVERSE);
 
 //lm2.setDirection(DcMotor.Direction.REVERSE);
 
 lm.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
 lm2.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
 
 
 BGRight.setDirection(Servo.Direction.REVERSE);
 FG2.setDirection(Servo.Direction.REVERSE);
 
 raiseHook();
 
 FG1.setPosition(1);
 FG2.setPosition(1);
 
    
 telemetry.addData("Status", "Initialized");
 telemetry.update();
 }
 
 public void mecanumDrive(double y1, double x1, double x2) {
 LF = 0; RF = 0; LR = 0; RR = 0;
 
 Y1 = y1;
 X1 = x1;
 Y2 = 0;
 X2 = x2;

 // Forward/back movement
 LF += Y1; RF += Y1; LR += Y1; RR += Y1;

 // Side to side movement
 LF += X1; RF -= X1; LR -= X1; RR += X1;

 // Rotation movement
 LF += X2; RF -= X2; LR += X2; RR -= X2;

 // Clip motor power values to +-motorMax
 LF = Math.max(-motorMax, Math.min(LF, motorMax));
 RF = Math.max(-motorMax, Math.min(RF, motorMax));
 LR = Math.max(-motorMax, Math.min(LR, motorMax));
 RR = Math.max(-motorMax, Math.min(RR, motorMax));

 // Send values to the motors
 setRawMotorPowers(LF,LR,RF,RR);

 // Send some useful parameters to the driver station
 telemetry.addData("LF", "%.3f", LF);
 telemetry.addData("RF", "%.3f", RF);
 telemetry.addData("LR", "%.3f", LR);
 telemetry.addData("RR", "%.3f", RR);
 
 telemetry.update();
 }
 
 public void setRawMotorPowers(double power1, double power2, double power3, double power4) {
   m1.setPower(power1);
   m2.setPower(power2);
   m3.setPower(power3);
   m4.setPower(power4);    
 }
 
 public  void wheelsIn() {
   w1.setPower(-1);
   w2.setPower(1);
   w3.setPower(1);
   w4.setPower(1);
   w5.setPower(-1);
   w6.setPower(-1);
 }
 
 public  void wheelsOut() {
   w1.setPower(1);
   w2.setPower(-1);
   w3.setPower(-1);
   w4.setPower(-1);
   w5.setPower(1);
   w6.setPower(1);
 }
 
 public  void wheelsOff() {
   w1.setPower(0);
   w2.setPower(0);
   w3.setPower(0);
   w4.setPower(0);
   w5.setPower(0);
   w6.setPower(0);
 }
 
 public void raiseHook() {
   skystone_grabber.setPosition(1);
   skystone_grabber2.setPosition(0);
 }
 
 public double exponential(double steepness, double current, double target, double total) {
        return  Math.min(Math.max(Math.pow(steepness, -2 * Math.abs((target - current) / total)) * -1 + 1, 0.15), 1);
    }
}
